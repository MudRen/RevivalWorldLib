* LPC 的 for 迴圈.

LPC 的 for 迴圈完全跟 C 語言的語法一樣, 如下所述:

for (表示式-1; 表示式-2; 表示式-3) {
	敘述;
	...;
}

    其中的 表示式-1 是用來初始化 for 迴圈. 也就是在迴圈執行之前就
  先執行 表示式-1, 此後, 每做完一次迴圈就先判斷 表示式-2, 如果
  表示式-2 為真(成立)就繼續下一次的迴圈, 當然, 第一次以後的每個迴圈
  在執行前會先執行 表示式-3.
    再說一次, 表示式-1 是第一次迴圈執行前做的, 表示式-2 是在每次迴圈
  結束前做的, 表示式-3 是第一次除外的迴圈執行前做的. 其中, 表示式-2
  用來判斷是不是要繼續迴圈, 如果 表示式-2 成立就繼續執行.

    如果在迴圈內執行到 break, 則強迫停止該迴圈, 並跳出該迴圈, 如果執行
  到 continue, 則停止該"次"迴圈, 並繼續下一次迴圈.

    底下有一個典型的 for 迴圈.

	int i;

	for (i = 0; i < 10; i++) {
	  write("i == " + i + "\n");
	  write("10 - i == " + (10 - i) + "\n");
	}
