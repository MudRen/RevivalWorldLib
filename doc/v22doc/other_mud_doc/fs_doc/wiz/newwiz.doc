[一些很基本的資料]
 
Function 的種類:
 
efun: (external function) 這些是在 driver 裡定義的 function.
      隨時可以被呼叫. 這是執行速度最快的一種 function.
lfun: 這些是 'local' 的 function, 可能是定義於 daemon 裡, 可
      能是在 inheritable object 如: room, user 裡. 只要你是
      inherit 那個 object, 你就可以用該 object 裡所提供的 function.
simul_efun: 跟 efun 類似, 但不在 driver 裡而是在 /adm/obj/simul_efun
      裡定義的, 隨時都可以呼叫. simul_efun 的目地是「模擬」 efun,
      或是取代 efun. 所以如果某個 simul_efun 和 efun 的名字相同, 則
      simul_efun 會被使用.
apply: mudlib object 裡所定義的 local function, 如 create(), init()..
      等. 通常都是由 driver 來呼叫. (所以如果 driver 找不到這些
      function, game 會 crash :) 但如果有必要, 任何 mudlib object 也
      都可以呼叫這些 function.
 
*********************
 
如何找 help:
 
    幾乎所有的 function 都有 man page, 打 help <function name> 即可.
有時因為某個 function 與指令名重覆, 則需告知 help 跳過 'general
help' 而改到某個特定的目錄搜詢.
 
範例: 查詢 cat() 的用法
 
> help cat
.... 先找到 _cat.c, cat 指令的 help, 不是我們要的.
想一想... cat()「應該」算是那一類的 function 呢? 當然是 efun.
直接叫 help 指令去 efuns 找吧:
 
> help efuns cat
Bingo! 找到了. 慢慢看吧.
 
如果你很明確的知道你要找的 help 內容在 /doc 底下某個 topic 內, 則你可
以用 'help <topic> <name>' 來查詢. 常用的 <topic> 有:
help, wizhelp, commands, efuns, lfuns, simul_efuns, applies,
concepts, and lpc.
 
*********************
 
如何找 function:
 
    如果你想做某件事, 但不知道要用那一個 function, 或是一時忘記
function 的名字, 怎麼辦呢? 用 apropos.
 
舉例來說, 我想知道那些 function 跟處理「時間」(time) 有關:
輸入:
> apropos time
輸出:
efuns: ctime() - return a time string
efuns: error - generate a run-time error
efuns: localtime() - convert to local time
efuns: set_reset - modify the time until reset on an object
efuns: time() - return the number of seconds since January 1, 1970
efuns: time_expression() - return the amount of real time that an expression took
efuns: uptime() - return the number of seconds elapsed since the last driver reboot
lfuns: more() - display a file to the user, one screen at a time.
simul_efuns: format_time - "Converts an int to a string representation of the time.
 
輸出格式為: function 種類, function 名稱, 簡介.
 
再用 help <function> 去看詳細的解說即可.
找不到你要的? 換一個 keyword 再找找看.
 
*********************
 
ED:
 
雖然 ftp 很方便, 但有時只是要修改, 或增加一小段東西, 這時 ed 指
令就派上用場了. 其實 ed 的功用滿齊的, 缺點就是它是 line editor,
有一大堆 mode changes. 我們在此不多說 ed 的指令, 有興趣的人可以用
'help ed' 查詢. (註: ed 的 help 檔「永遠」都不會有中文解說, 除非
有人自告奮勇去寫.) 在 ed 下常用的指令:
有 ':' prompt 時表示你在 'command mode' 下, 可以下指令.
否則你就是在 'edit mode'. 剛啟動 ed 時你一定會在 'command mode'.
要啟動 'edit mode' 你要下一個跟 'edit' 有關的指令, 要跳出 'edit
mode', 在任何一個空白行的起點輸入 '.' 再按 'enter' 鍵.
 
$ - 這個符號在 command mode 永遠都代表最後一行的行號.
 
:[n,m]p    -- 列出檔案內容, n 為開始行號, m 為結束行號. 如果沒有
              m,n 則列出 'pointer' 所在行的內容. 剛啟動 ed 時
              'pointer' 應該在第一行. 如果 'p' 前只有一個數字, 則
              列出數字所指行號的內容.
:[n,m]d    -- 刪除由 n 到 m 行的內容.
:[n]a      -- 在 n 行後加入東西. 這個指令會讓你進入 'edit mode'
:[n]i      -- 在 n 行前加入東西. 這個指令會讓你進入 'edit mode'
:[n]c      -- 修改第 n 行的內容. 這個指令會讓你進入 'edit mode', 之後
              你所打入的東西都會取代第 n 行原有的內容. [註: 這個指令
              的「有效」範圍是一行, 超過一行並不會讓你修改 n+1 行的東
              西.]
 
在下'a', 'i' 和 'c' 等指令時, 如果沒有指定行號, 則以 'pointer' 所在
行為準.
:w [filename] -- 將檔案內容寫回去. 如果沒有指定檔名, 則 ed 假定你要
                 寫回原來的檔案內.
:q        -- 離開 ed. [註: 此指令只適用於當檔案已經儲存過後, 或是檔案
             沒有被更動過.]
:Q        -- 如果檔案被動過, 但你不想寫入被更動的內容, 你可以用這個指
             令離開 ed.
:!<cmd>   -- 在 ed 下執行某些 mud 指令.

 如果要編輯新檔案, 請先打 a 或 i 或 c :
       a = 從此列之下插入編輯;
       i = 從此列之上插入編輯;
       c = 修改此列並插入編輯。
 打入數字則會跳至那列並輸出內容。
 如果你編輯完畢, 請在編輯結尾的次列開頭處打 . 即可。
 如果想存檔請打 x 。 否則請打 q 或 Q 。
 如果你想知道現在是第幾列請打 = , 想知道內容請打 p 。
 或者可以先 set number 然後 set save, 則以後你線上編輯
 時, 會自動在開頭處印出列數。

有關 ed 的其他指令請看 help.
 
                                           Written By Elon@ES
                                           Update  By Fir@EP 8-30-95